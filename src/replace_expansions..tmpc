/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   replace_expansions.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nbelouni <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/03/13 17:30:53 by nbelouni          #+#    #+#             */
/*   Updated: 2017/03/14 15:46:04 by nbelouni         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "42sh.h"

void		init_is_quote(int *s2, int i, int *is_quotes, char c)
{
	if (*is_quotes == c)
		*is_quotes = 0;
	else if (*is_quotes == 0)
	{
		*is_quotes = c;
		s2[i] = *is_quotes;
	}
}

void		find_which_quote(char *s, int *s2, int i, int *is_quotes)
{
	if (is_char(s, i, '\''))
		init_is_quote(s2, i, is_quotes, '\'');
	if (is_char(s, i, '"'))
		init_is_quote(s2, i, is_quotes, '"');
	if (is_char(s, i, '`'))
		init_is_quote(s2, i, is_quotes, '`');
}

int			find_max_lvl(int *lex, int len)
{
	int	lvl;
	int	i;

	lvl = 0;
	i = -1;
	while (++i < len)
	{
		if (lvl < lex[i])
			lvl = lex[i];
	}
	return (lvl);
}

int			is_missing_comma(int *lex, int len, int max_lvl)
{
	int		comma_per_lvl[max_lvl];
	int		i;
	int		level;

	PUT2("ok\n");
	i = -1;
	while (++i < max_lvl)
		comma_per_lvl[i] = 0;
	i = -1;
	level = 0;
	while (++i < len)
	{
		if (lex[i] > 0)
			level = lex[i];
		if (lex[i] == -1)
			comma_per_lvl[level - 1] += 1;
	}
	i = max_lvl;
	while (--i >= 0)
	{
		if (comma_per_lvl[i] == 0)
			return (i + 1);
	}
	return (0);
}

void		init_lex(char *s, int *s2, int *level, int *curr_level)
{
	int		i;
	int		is_quotes;

	PUT2("init_lex()");PUT2(NULL);X('\n');
	i = -1;
	is_quotes = 0;
	while (s[++i])
	{
		s2[i] = is_quotes;
		if (is_quotes == 0 && is_char(s, i, '{'))
		{
			*curr_level += 1;
			s2[i] = *curr_level;
			if (*level < *curr_level)
				*level = *curr_level;
		}
		else if (is_quotes == 0 && is_char(s, i, '}'))
		{
			s2[i] = *curr_level;
			*curr_level = (*curr_level == 0) ? 0 : *curr_level - 1;
		}
		else if (is_quotes == 0 && is_char(s, i, ',') && *curr_level > 0)
			s2[i] = -1;
		find_which_quote(s, s2, i, &is_quotes);
	}
	i = -1;
	while (++i < (int)ft_strlen(s))
	{
		E(s2[i]);X(' ');
	}
	X('\n');
}

int			*lex_text(char *s, int *level)
{
	int		*s2;
	int		curr_level;
	int		i;

	PUT2("lex_text()");PUT2(NULL);X('\n');
	if (!(s2 = ft_memalloc(sizeof(int) * (ft_strlen(s) + 1))))
		return (NULL);
	i = -1;
	while (++i < (int)ft_strlen(s))
		s2[i] = 0;
	curr_level = 0;
	init_lex(s, s2, level, &curr_level);

	if (curr_level != 0)
	{
		i = -1;
		while (++i < (int)ft_strlen(s))
		{
			if (s2[i] <= curr_level && s2[i] > 0)
				s2[i] = 0;
			else if (s2[i] > curr_level)
				s2[i] -= curr_level;
		}
	}
	int tmp_lvl = is_missing_comma(s2, ft_strlen(s), find_max_lvl(s2, ft_strlen(s)));
	while (tmp_lvl != 0)
	{
		i = -1;
		while (++i < (int)ft_strlen(s))
		{
			if (s2[i] > tmp_lvl)
				s2[i] -= 1;
			else if (s2[i] == tmp_lvl)
				s2[i] = 0;
		}
		tmp_lvl = is_missing_comma(s2, ft_strlen(s), find_max_lvl(s2, ft_strlen(s)));
		PUT2("tmp_lvl : ");E(tmp_lvl);X('\n');
	}
	return (s2);
}

char		**find_new_args(char *s, int *lex, int begin, int end)
{
	int		i;
	int		j;
	int		arr_len;
	char	**new_args;

	j = begin;
	arr_len = 1;
	while (j < end)
	{
		if (lex[j] == -1)
			arr_len += 1;
		j++;
	}
	new_args = ft_memalloc(sizeof(char *) * arr_len + 1);
	j = begin;
	i = 0;
	while (j <= end)
	{
		if (j == end || lex[j] == -1)
		{
			new_args[i] = ft_strsub(s, begin, j - begin);
			begin = j + 1;
			i++;
		}
		j++;
	}
	new_args[arr_len] = NULL;
	return (new_args);
}

char		**replace_expansions(char *s, char **new_args, int begin, int end)
{
	char	*tmp;
	char	*tmp2;
	int		i;

	i = -1;
	while (new_args[++i])
	{
		tmp = NULL;
		if (begin - 1 > 0)
			tmp = ft_strsub(s, 0, begin - 1);
		tmp2 = ft_strjoin(tmp, new_args[i]);
		if (tmp)
			ft_strdel(&tmp);
		tmp = ft_strjoin(tmp2, s + end + 1);
		ft_strdel(&tmp2);
		ft_strdel(&(new_args[i]));
		new_args[i] = tmp;
	}
	return (new_args);
}

void		init_bg_end(char *s, int **lex, int *begin, int *end)
{
	int		max_lvl;
	int		i;

	max_lvl = 0;
	*lex = lex_text(s, &max_lvl);
	i = -1;
	*begin = -1;
	*end = -1;
	while (++i < (int)ft_strlen(s))
	{
		if (*begin == -1 && (*lex)[i] == max_lvl)
			*begin = i + 1;
		else if (*end < *begin && (*lex)[i] == max_lvl)
		{
			*end = i;
			break ;
		}
	}
}

void		expand_s(char **s, int *lex, int begin, int end)
{
	int		new_begin;
	int		new_end;
	char	*tmp;

	new_begin = begin;
	while (new_begin >= 0)
	{
		if (lex[new_begin] == lex[begin - 1] - 1 || lex[new_begin] == -1)
			break ;
		new_begin--;
	}
	new_end = end;
	while (new_end < (int)ft_strlen(*s))
	{
		if (lex[new_end] == lex[begin - 1] - 1 || lex[new_end] == -1)
			break ;
		new_end++;
	}
	tmp = ft_strsub(*s, new_begin + 1, new_end - new_begin - 1);
	int *tmp_lex;
	int		begin_ref = new_begin;
	int		end_ref = new_end;
	init_bg_end(tmp, &tmp_lex, &new_begin, &new_end);
	
	if (is_missing_comma(tmp_lex, ft_strlen(tmp), find_max_lvl(lex, ft_strlen(tmp))))
	{
		PUT2("!is_ comma");PUT2(NULL);X('\n');
		return ;
	}
	char			**new_args;
	new_args = find_new_args(tmp, tmp_lex, new_begin, new_end);
	new_args = replace_expansions(tmp, new_args, new_begin, new_end);
	int i = -1;
	
	char	*tmp2;
	tmp2 = ft_strsub(*s, 0, begin_ref);
		PUT2("tmp2 : ");PUT2(tmp2);X('\n');
	while(new_args[++i])
	{
		if (begin_ref != 0)
		{
			tmp2 = ft_strjoin(tmp2, ",");
		}
		else
		{
			tmp2 = ft_strjoin(tmp2, "{");
			begin_ref = 1;
		}
		tmp2 = ft_strjoin(tmp2, new_args[i]);

		PUT2("tmp2 : ");PUT2(tmp2);X('\n');
	}
	tmp2 = ft_strjoin(tmp2, *s + end_ref);
	ft_strdel(s);
	*s = tmp2;
}

char		**find_expansions(char **s)
{
	int				*lex;
	int				begin;
	int				end;
	char			**new_args;
	int				max_lvl;

	PUT2("find_expansions()");PUT2(NULL);X('\n');
	max_lvl = 0;
	lex = lex_text(*s, &max_lvl);
	int j = -1;
	while (++j < (int)ft_strlen(*s))
	{
		E(lex[j]);X(' ');
	}
	X('\n');
	PUT2("max_lvl : ");E(max_lvl);X('\n');
	if (is_missing_comma(lex, ft_strlen(*s), max_lvl))
	{
		PUT2("!is_ comma");PUT2(NULL);X('\n');
		new_args = ft_memalloc(sizeof(char *) * 2);
		new_args[0] = *s;
		new_args[1] = NULL;
		return (new_args);
	}
		PUT2("is_ comma");PUT2(NULL);X('\n');
	while (max_lvl > 1)
	{
		init_bg_end(*s, &lex, &begin, &end);
		expand_s(s, lex, begin, end);
		ft_memdel((void **)&lex);
		max_lvl = 0;
		lex = lex_text(*s, &max_lvl);
	}
	PUT2("s : ");PUT2(*s);X('\n');
	init_bg_end(*s, &lex, &begin, &end);
	new_args = find_new_args(*s, lex, begin, end);
	new_args = replace_expansions(*s, new_args, begin, end);
	int i = -1;
	while (new_args[++i])
	{
		PUT2("new_args[i] : ");PUT2(new_args[i]);X('\n');
	}
	ft_memdel((void **)&lex);
	ft_strdel(s);
	return (new_args);
}
